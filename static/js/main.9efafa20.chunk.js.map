{"version":3,"sources":["Components/TodoTask.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoTask","task","completeTask","className","taskName","deadLine","onClick","App","useState","setTask","setDeadLine","todoList","setTodoList","handleChange","event","target","name","value","Number","taskNameToDelete","filter","type","placeholder","onChange","required","newTask","map","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAyBeA,EAjBE,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,aACtB,OACI,sBAAKC,UAAU,OAAf,UACI,sBAAKA,UAAU,UAAf,UACI,+BAAOF,EAAKG,WACZ,+BAAOH,EAAKI,cAEhB,wBACIC,QAAS,WACLJ,EAAaD,EAAKG,WAF1B,mBCkCGG,EA5CC,WACd,MAAwBC,mBAAiB,IAAzC,mBAAOP,EAAP,KAAaQ,EAAb,KACA,EAAgCD,mBAAiB,GAAjD,mBAAOH,EAAP,KAAiBK,EAAjB,KACA,EAAgCF,mBAAkB,IAAlD,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAACC,GACM,SAAtBA,EAAMC,OAAOC,KACfP,EAAQK,EAAMC,OAAOE,OAErBP,EAAYQ,OAAOJ,EAAMC,OAAOE,SAW9Bf,EAAe,SAACiB,GACpBP,EAAYD,EAASS,QAAO,SAACnB,GAC3B,OAAOA,EAAKG,WAAae,OAI7B,OACE,sBAAKhB,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,uBAAOkB,KAAK,OAAOC,YAAY,0BAA0BN,KAAK,OAAOC,MAAOhB,EAAMsB,SAAUV,EAAcW,UAAQ,IAClH,uBAAOH,KAAK,SAASL,KAAK,WAAWM,YAAY,wBAAwBL,MAAOZ,EAAUkB,SAAUV,EAAcW,UAAQ,OAE5H,wBAAQlB,QApBE,WACd,IAAMmB,EAAU,CAAErB,SAAUH,EAAMI,SAAUA,GAC5CO,EAAY,GAAD,mBAAKD,GAAL,CAAec,KAC1BhB,EAAQ,IACRC,EAAY,IAgBR,yBAEF,qBAAKP,UAAU,WAAf,SACGQ,EAASe,KAAI,SAACzB,EAAa0B,GAC1B,OAAO,cAAC,EAAD,CAAoB1B,KAAMA,EAAMC,aAAcA,GAA/ByB,YC5BjBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9efafa20.chunk.js","sourcesContent":["import React from 'react'\r\nimport { ITask } from \"../Interfaces\"\r\n\r\ninterface Props {\r\n    task: ITask;\r\n    completeTask(taskNameToDelete: string): void\r\n}\r\n\r\nconst TodoTask = ({ task, completeTask }: Props) => {\r\n    return (\r\n        <div className=\"task\">\r\n            <div className=\"content\">\r\n                <span>{task.taskName}</span>\r\n                <span>{task.deadLine}</span>\r\n            </div>\r\n            <button\r\n                onClick={() => {\r\n                    completeTask(task.taskName)\r\n                }}\r\n            >x\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoTask\r\n","import React, { FC, useState, ChangeEvent } from 'react';\r\nimport './App.css';\r\nimport TodoTask from './Components/TodoTask';\r\nimport { ITask } from './Interfaces';\r\n\r\nconst App: FC = () => {\r\n  const [task, setTask] = useState<string>(\"\")\r\n  const [deadLine, setDeadLine] = useState<number>(0)\r\n  const [todoList, setTodoList] = useState<ITask[]>([])\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n    if (event.target.name === \"task\") {\r\n      setTask(event.target.value)\r\n    } else {\r\n      setDeadLine(Number(event.target.value))\r\n    }\r\n  }\r\n\r\n  const addTask = (): void => {\r\n    const newTask = { taskName: task, deadLine: deadLine }\r\n    setTodoList([...todoList, newTask])\r\n    setTask(\"\")\r\n    setDeadLine(0)\r\n  }\r\n\r\n  const completeTask = (taskNameToDelete: string): void => {\r\n    setTodoList(todoList.filter((task) => {\r\n      return task.taskName !== taskNameToDelete\r\n    }))\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"header\">\r\n        <div className=\"inputContainer\">\r\n          <input type=\"text\" placeholder=\"What do you need to do?\" name=\"task\" value={task} onChange={handleChange} required />\r\n          <input type=\"number\" name=\"deadLine\" placeholder=\"Deadline (in Days)...\" value={deadLine} onChange={handleChange} required />\r\n        </div>\r\n        <button onClick={addTask}>Add Task</button>\r\n      </div>\r\n      <div className=\"todoList\">\r\n        {todoList.map((task: ITask, key: number) => {\r\n          return <TodoTask key={key} task={task} completeTask={completeTask} />\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}